#! /usr/bin/env python
#coding=utf-8

import os


table_base = \
"/**\n" \
"* @file:   table_base.hpp\n" \
"* @author: SeanLiu <darkdawn@sina.com>\n" \
"* @brief:  The file is generated by tools. Don't modify it.\n" \
"*/\n" \
"#ifndef TABLE_BASE_HPP_\n" \
"#define TABLE_BASE_HPP_\n" \
"#include <map>\n" \
"#include <vector>\n" \
"#include <string>\n" \
"\n" \
"// Base方法\n" \
"template< class T >\n" \
"void Parse(T& data, const unsigned char* &p_data)\n" \
"{\n" \
"    data = *((T*)p_data);\n" \
"    p_data += sizeof(T);\n" \
"}\n" \
"\n" \
"template<>\n" \
"inline void Parse<std::string>(std::string& data, const unsigned char* &p_data)\n" \
"{\n" \
"   int size;\n" \
"   Parse(size, p_data);\n" \
"   data = std::string((const char*)p_data, size);\n" \
"   p_data += size;\n" \
"}\n" \
"\n" \
"template< class T >\n" \
"void Parse(std::vector<T> &data, const unsigned char* &p_data)\n" \
"{\n" \
"    int size;\n" \
"    Parse(size, p_data);\n" \
"    data.resize(size);\n" \
"    for( int i = 0; i < size; ++i )\n" \
"    {\n" \
"        Parse(data[i], p_data);\n" \
"    }\n" \
"}\n" \
"\n" \
"#ifdef _WIN32\n" \
"#define _CRT_SECURE_NO_WARNINGS\n" \
"#endif\n" \
"\n" \
"template<class Sheet>\n" \
"inline bool ReadSheet(const char* mapname, std::map<int, Sheet> &map, FILE* fp)\n" \
"{\n" \
"   int sheet_size = 0;\n" \
"   if (fread((void*)&sheet_size, sizeof(int), 1, fp) != 1)\n" \
"       return false;\n" \
"   const unsigned char* p_buffer = new unsigned char[sheet_size];  \n" \
"   const unsigned char* p_data = p_buffer;\n" \
"   bool res = true;\n" \
"   if( fread((void*)p_data, sheet_size, 1, fp) == 1 )\n" \
"   {\n" \
"       int map_count = 0;\n" \
"       Parse(map_count, p_data);\n" \
"       for( int i = 0; i < map_count; ++i )\n" \
"       {\n" \
"           Sheet sheet_data;\n" \
"           Parse(sheet_data, p_data);\n" \
"           if( map.find(sheet_data.GetKey()) != map.end() )\n" \
"           {\n" \
"               printf(\"%s, duplicated key: %d\\n\", mapname, sheet_data.GetKey());\n" \
"               break;\n" \
"           }\n" \
"           map[sheet_data.GetKey()] = sheet_data;\n" \
"       }\n" \
"   }\n" \
"   else\n" \
"   {\n" \
"       printf(\"%s, read err\\n\", mapname);\n" \
"       res = false;\n" \
"   }\n" \
"\n" \
"   delete[] p_buffer;\n" \
"   return res;\n" \
"}\n" \
"\n" \
"#endif\n"

class LayoutBase:
    def __init__(self, book_name):
        self._book_name = book_name
        self._header_indentation = 0
        self._output_h = []
        self._output_cpp = []

    def LayoutBaseFile(self):
        if os.path.exists("./server") == False :
           os.mkdir("./server")
        file_name = "./server/table_base.hpp"
        file = open(file_name, 'w+')
        file.writelines(table_base)
        file.close()

    def LayoutStructDefines(self, sheet_node) :
        """解析结构定义区"""
        for struct_node in sheet_node.structs :
            if struct_node.repeated == True :   # Items
                field_node = struct_node.fields[0]
                self._output_h.append(self.HeaderIndentation() + "typedef std::vector<" + field_node.type +"> " +  struct_node.name + ";\n")

            else :  #Reward{ items, exp }
                self.LayoutStructHead(struct_node.name)    # Reward  | Items
                self._output_cpp.append("\nvoid Parse(" + sheet_node.name.capitalize() + "Data::" + \
                    struct_node.name + "& data, const unsigned char* &p_data)\n{\n")
                for field_node in struct_node.fields :
                   # optional Items items = 1; 
                   self._output_h.append(self.HeaderIndentation() + field_node.type +" " + field_node.name + ";\n")
                   self._output_cpp.append("\tParse(data." + field_node.name + ", p_data);\n")
                self.LayoutStructTail()
                self._output_cpp.append("}\n\n")


    def LayoutFieldDefines(self, sheet_node):
        self._output_h.append("\n")
        self._output_cpp.append("void Parse(" + sheet_node.name.capitalize() + "Data& data, const unsigned char* &p_data)\n{\n")

        key_define = False
        for field_node in sheet_node.fields :
            if key_define == False :
                self._output_h.append(self.HeaderIndentation() + "int GetKey() { return " + field_node.name + "; }\n\n")
                key_define = True
            self._output_h.append(self.HeaderIndentation() + field_node.type + " " + field_node.name + ";\t//" + field_node.cname + "\n")
            self._output_cpp.append("\tParse(data." + field_node.name + ", p_data);\n")
        self._output_cpp.append("}\n")


    def LayoutBookNode(self, sheets) :
        """生成工作薄结构 h"""
        self._output_h.append("\n")
        self.LayoutStructHead(self._book_name.capitalize() + "Table")
        self._output_h.append(self.HeaderIndentation() + "bool LoadData(const char* path);\n")
        for sheet_node in sheets : 
            self._output_h.append(self.HeaderIndentation() + sheet_node.name.capitalize() + "Data* Get" + \
                sheet_node.name.capitalize() + "Data(int id = 0);\n")
            #Sheet1Data* GetSheet1Data(int id);
            self.LayoutDataFunc(sheet_node.name)

        self._output_h.append("\n")

        for sheet_node in sheets : 
            self._output_h.append(self.HeaderIndentation() + "std::map<int, " + sheet_node.name.capitalize() + \
                "Data> " + sheet_node.name.lower() + "_data_map;\n")

        self.LayoutStructTail()
        """生成工作薄结构 cpp"""
        self._output_cpp.append("\n")
        self._output_cpp.append("bool " + self._book_name.capitalize() + "Table::LoadData(const char* path)\n")
        self._output_cpp.append("{\n\tFILE* fp = fopen(path, \"rb\");\n")
        self._output_cpp.append("\tif (fp == nullptr) return false;\n")
        self._output_cpp.append("\tbool res = false;\n")
        self._output_cpp.append("\twhile(1) {\n")
        for sheet_node in sheets :
            self._output_cpp.append("\t\tif (!ReadSheet(\"" + sheet_node.name.lower() +"_data_map\", " + sheet_node.name.lower() + "_data_map, fp)) break;\n")
        self._output_cpp.append("\t\tres = true;\n\t\tbreak;\n\t}\n")

        self._output_cpp.append("\tfclose(fp);\n")
        self._output_cpp.append("\treturn res;\n")
        self._output_cpp.append("}\n")


    def LayoutDataFunc(self, sheet_name) :
        self._output_cpp.append("\n")
        self._output_cpp.append(sheet_name.capitalize() + "Data* " + self._book_name.capitalize() + \
            "Table::Get" + sheet_name.capitalize() + "Data(int id)\n{\n")
        self._output_cpp.append("\tif (id == 0 && " + sheet_name.lower() + "_data_map.size() == 1)\n")
        self._output_cpp.append("\t\treturn &" + sheet_name.lower() + "_data_map.begin()->second;\n")
        self._output_cpp.append("\tauto it = " + sheet_name.lower() + "_data_map.find(id);\n")
        self._output_cpp.append("\tif (it != " + sheet_name.lower() + "_data_map.end())\n")
        self._output_cpp.append("\t\treturn &it->second;\n")
        self._output_cpp.append("\treturn nullptr;\n}\n")


    def LayoutFileHeader(self) :
        """生成PB文件的描述信息"""
        self._output_h.append("/**\n")
        self._output_h.append("* @file:   " + self._book_name + ".h\n")
        self._output_h.append("* @author: SeanLiu <darkdawn@sina.com>\n")
        self._output_h.append("* @brief:  The file is generated by tools. Don't modify it.\n")
        self._output_h.append("*/\n")
        self._output_h.append("#pragma once\n")
        self._output_h.append("#include <map>\n")
        self._output_h.append("#include <vector>\n\n")

        self._output_cpp.append("/**\n")
        self._output_cpp.append("* @file:   " + self._book_name + ".cpp\n")
        self._output_cpp.append("* @author: SeanLiu <darkdawn@sina.com>\n")
        self._output_cpp.append("* @brief:  The file is generated by tools. Don't modify it.\n")
        self._output_cpp.append("*/\n")
        self._output_cpp.append("#include \"table_base.hpp\"\n")
        self._output_cpp.append("#include \"" + self._book_name + ".h\"\n")
        self._output_cpp.append("#include <fstream>\n\n")


    def LayoutStructHead(self, struct_name) :
        """生成结构头"""
        self._output_h.append(self.HeaderIndentation() + "struct " + struct_name + " {\n")
        self._IncreaseHeaderIndentation()      

    def LayoutStructTail(self) :
        """生成结构尾"""
        self._DecreaseHeaderIndentation()
        self._output_h.append(self.HeaderIndentation() + "};\n\n")

    def _IncreaseHeaderIndentation(self) :
        """增加缩进"""
        self._header_indentation += 1

    def _DecreaseHeaderIndentation(self) :
        """减少缩进"""
        self._header_indentation -= 1

    def HeaderIndentation(self) :
        """返回缩进"""
        return "\t"*self._header_indentation

    def Write2File(self) :
        """输出到文件"""
        header_file = open("server/" + self._book_name + ".h", "w+")
        header_file.writelines(self._output_h)
        header_file.close()

        source_file = open("server/" + self._book_name + ".cpp", "w+")
        source_file.writelines(self._output_cpp)
        source_file.close()
